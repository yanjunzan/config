#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

### Created by Brad Sims <tanfj@yahoo.com> 25/06/2004

### I got tired of .screenrc's on the internet being so
### poorly commented... So being a good GNUbie I took matters
### into my own hands; and wrote this dotfile.

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

##    Explanation of hardstatus line    ##

# Ignore the ' marks if you use these examples for yourself

# Note that if you want to use the color brown under konsole
# You actually use bright yellow (%{Y}).

# Note the embeded space after the colon, I feel
#  it just looks nicer with a blank between the
#  text and console edge:
#   '%{=b}%{G} Screens: '

# This prints the window listing in blue:
#   '%{b}%w'

# This right-aligns what follows:
#   '%='

# This displays the time (hours and minutes) in 24hr format
# and adds an AM/PM flag, in bold green:
#	'%{G}%c'

# This displays the day of the week:
#   '%D'

#This displays the date in year-Mon-day format:
# and again I embeded a space to give me one space
# between the text and console edge:
#	'%Y-%M-%d'

# The resultsing command give you a status line that
#  looks like this:
#   | Screens: 0* bash  <blanks zapped>         5:30PM  Fri, Jun/25/2004 |
#  (The pipes indicate the edges of the xterm/console).

# Green text, time, and date; windows in blue:
hardstatus alwayslastline "%{=b}%{G} Screen(s): %{b}%w %=%{kG}%c  %D, %Y-%m-%d "

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

##    Some general options    ##

# Turn off start message:
startup_message off

# Set messages timeout to one second:
msgwait 1

# Proper scroll, not award Ctrl+A+Esc
termcapinfo xterm* ti@:te@

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

##    Keybindings    ##

# bind <F7> to detach screen from this terminal
# bind <F8> to kill current session
# bind <F10> to create a new screen
# bind <F9> to rename an existing window
# bind <F11> to move to previous window
# bind <F12> to move to next window
# bindkey -k k6 detach
# bindkey -k k7 kill
# space in keyboard
# bindkey -k k; screen
# bindkey -k k9 title
# bindkey -k k1 prev # F1 for previous window
# bindkey -k k2 next # F2 for next window
# bindkey -k k3 select 3

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u#\t:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alFh --group-directories-first'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

export PATH=/home/simon/UNF/fylogeniPipeline/orthomclSoftware-v2.0.2/bin:$PATH


# uncomment for a colored prompt, if the terminal has the capability; turned                                                                                                        
# off by default to not distract the user: the focus in a terminal window                                                                                                           
# should be on the output of commands, not on the prompt                                                                                                                            
force_color_prompt=yes                                                                                                                                                              
                                                                                                                                                                                    
if [ -n "$force_color_prompt" ]; then                                                                                                                                               
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then                                                                                                                       
        # We have color support; assume it's compliant with Ecma-48                                                                                                                 
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such                                                                                                         
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# Prompt coloring and theme
# lightyellow [hh:mm:ss] with lightgreen [user@host: pwd]$
# complete pwd if >40 characters else last firectory field
export PROMPT_COMMAND='PS1="\[\033[0;33m\][\t]\`
if [[ \$? = "0" ]];
        then echo "\\[\\033[32m\\]";
        else echo "\\[\\033[31m\\]";
fi\`[\u@\h: \`
if (( `pwd|wc -c|tr -d " "` > 150 ));
        then echo "\\[\\033[36m\\]\\W";
        else echo "\\[\\033[36m\\]\\w";
fi\`]\[\033[0m\]\$ ";
echo -ne "\033]0;`hostname -s`:`pwd`\007"'


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias lsd='ls -l --color=always | grep ^"d"'

#My shit
export LS_COLORS=`echo $LS_COLORS|sed 's/34\;42/0\;45/g'`
export LS_COLORS=`echo $LS_COLORS|sed 's/di=01\;34/di=01\;36/'i`
export BT2_HOME=/home/simon/projects/bin/bowtie2-2.2.3
export LC_ALL="en_US.UTF-8"
#test
export LANGUAGE="en"
export LANG="C"
export LC_MESSAGES="C"
